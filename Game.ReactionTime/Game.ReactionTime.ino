#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>
#include <AsyncDelay.h>

//Variables for the gameplay
int val;
int score = 0;
int scoreLight = 0;
int spinSpeed = 120;

//Variabes for the interrupts
const int ButtA = 4;
volatile bool FlagA = 0;
const int ButtB = 5;
volatile bool FlagB = 0;
volatile bool instStop = 0;

//Variables for noise functions
float midi[127];
int A_four = 440;
int nextLevel[3][2]{
  { 60, 80 },
  { 62, 80 },
  { 64, 160 },
};

AsyncDelay delay_1s;

void setup() {

//Sets up the CPX functions, Serial mointor, interrupts, sound, and async 
  CircuitPlayground.begin();
  Serial.begin(9600);
  attachInterrupt(ButtA, game, RISING);
  attachInterrupt(ButtB, control, RISING);
  generateMIDI();
  delay_1s.start(1000, AsyncDelay::MILLIS);

  while (!Serial);
  Serial.println("Starting Game");
}

void loop() {

  CircuitPlayground.speaker.set(250);

  //Lights will spin around each LED as long as Button A is not pressed and the spin speed is above 20 millis
  for (int i = 0; i < 10 && !FlagA && spinSpeed != 20; i++) {
    CircuitPlayground.setBrightness(5);
    CircuitPlayground.setPixelColor(i, 255, 65, 0);
    CircuitPlayground.setPixelColor(i - 1, 255, 65, 0);
    CircuitPlayground.setPixelColor(i + 1, 255, 65, 0);
    delay(spinSpeed); //The LED will stay lit up for the amount of time in millis equal to spinSpeed
    CircuitPlayground.setPixelColor(i, 0, 0, 0);
    CircuitPlayground.setPixelColor(i + 1, 0, 0, 0);
    CircuitPlayground.setPixelColor(i - 1, 0, 0, 0);
    delay(1);
    int val = i;  //creates the value that is lit up as a global variable
    //If Button A is pressed, it reads if you level up
    if (FlagA) {
      //If the LED 7 is lit when Button A is pressed, add 5 to score, run Plus functions, and decrease spinSpeed (This makes the lights faster)
      if (val == 7) {
        score += 5;
        scoreboard();
        for (int i = 0; i < sizeof(nextLevel) / sizeof(nextLevel[0]); i++) {
          CircuitPlayground.playTone(midi[nextLevel[i][0]], nextLevel[i][1]);
          lightPlus();
          delay(1);
        }
        speechPlus();
        spinSpeed -= 10;
      //If LED 7 is not lit when Button A is pressed, subtract one from score, run Minus functions  
      }
      if (val != 7) {
        score -= 1;
        scoreboard();
        CircuitPlayground.setPixelColor(val, 255, 0, 0);
        CircuitPlayground.setPixelColor(val - 1, 0, 0, 0);
        CircuitPlayground.setPixelColor(val + 1, 0, 0, 0);
        speechMinus();
        delay(1000);
        CircuitPlayground.setPixelColor(val, 0, 0, 0);
      }
      FlagA = 0;
    }
  }

  //If Button B is pressed, restart the game at the starting speed and score
  if (FlagB) {
    Serial.println("Game Restart");
    spinSpeed = 120;
    score = 0;
    FlagB = 0;
    instStop = 0;
  }



  //Async that checks if the player has won the game. If they have, play Complete functions
  if (delay_1s.isExpired()) {
    if (spinSpeed == 20 && !FlagB && !instStop) {
      scoreComplete();
      lightComplete();
      speechComplete();
    }
    delay_1s.repeat();
  }
}





//Variables for speech functions, courtesy of Peter Knight's Talkie library
const uint8_t spPAUSE1[] PROGMEM = { 0x08, 0x14, 0xC1, 0xDD, 0x45, 0x64, 0x03, 0x00, 0xFC, 0x4A, 0x56, 0x26, 0x3A, 0x06, 0x0A };

const uint8_t spPLUS[] PROGMEM = { 0x02, 0xF0, 0xD6, 0xCC, 0x01, 0x51, 0x8B, 0x8D, 0xA2, 0x29, 0x65, 0x4B, 0x5F, 0x3D, 0x8B, 0x51, 0x34, 0xB3, 0x99, 0x2E, 0x0B, 0x4F, 0xD9, 0xF4, 0x66, 0x84, 0xB6, 0x3C, 0x75, 0x35, 0x93, 0x91, 0x92, 0xE9, 0x54, 0xCD, 0x4C, 0x65, 0x72, 0xAB, 0x55, 0x95, 0xE0, 0x15, 0x1C, 0xB5, 0x5B, 0x3D, 0x49, 0x86, 0x9B, 0x79, 0x52, 0xC0, 0xC5, 0x1C, 0x1A, 0xD0, 0x80, 0x06, 0x04, 0xF0, 0x04, 0xF9, 0xFF, 0x15, 0x39, 0x49, 0x79, 0x05 };

const uint8_t spFIVE[] PROGMEM = { 0x08, 0xE8, 0xD2, 0x15, 0x03, 0x02, 0xA8, 0x3A, 0x5D, 0x01, 0x55, 0x96, 0x0E, 0x3F, 0xA5, 0x70, 0xE7, 0x98, 0xBD, 0x82, 0xDC, 0xDB, 0x5D, 0xAD, 0xD6, 0x0A, 0x4A, 0xF8, 0x70, 0xF5, 0x86, 0x27, 0x2E, 0xFE, 0xD3, 0xC5, 0x6B, 0x9D, 0xB4, 0xE9, 0xAB, 0x94, 0x68, 0x78, 0xAA, 0xEA, 0x2F, 0xC3, 0xA3, 0xF1, 0xE9, 0x6A, 0xD8, 0x88, 0xF0, 0xD9, 0xA7, 0x6F, 0x61, 0xA2, 0xDC, 0x66, 0xAF, 0xBE, 0x85, 0xB6, 0x34, 0x9B, 0xB5, 0xFA, 0xEE, 0x5D, 0xD2, 0x73, 0xCE, 0xEA, 0xBB, 0x33, 0x8A, 0xAC, 0x3A, 0x63, 0xE8, 0x56, 0x29, 0xAB, 0xAB, 0x94, 0xBE, 0x67, 0x45, 0xCB, 0x9E, 0x5D, 0xFA, 0xE6, 0x04, 0xB3, 0x72, 0x76, 0xEA, 0x8A, 0x26, 0x6F, 0xCF, 0x29, 0xA9, 0x4D, 0xCA, 0x34, 0x3D, 0x6A, 0xC7, 0xC1, 0x0F, 0xFF, 0x5A, 0x56 };

const uint8_t spMINUS[] PROGMEM = { 0xAE, 0x48, 0xCA, 0xB4, 0x51, 0xB6, 0xE4, 0xA2, 0x65, 0xD9, 0x84, 0x25, 0xE2, 0x96, 0x99, 0xAE, 0xA4, 0xEA, 0x4B, 0x53, 0xF1, 0x79, 0xE2, 0xA6, 0xB7, 0x43, 0xAD, 0xE5, 0x89, 0xBA, 0xDC, 0x0E, 0x8D, 0x94, 0x27, 0x1A, 0x6A, 0x32, 0xDC, 0x5A, 0x9E, 0x68, 0xD9, 0x16, 0x0F, 0x4F, 0x78, 0xE2, 0xE5, 0x97, 0xC5, 0x22, 0xE1, 0xCA, 0x96, 0x1B, 0x16, 0xA9, 0x98, 0xAD, 0x6C, 0x52, 0xA9, 0xC5, 0xA3, 0x94, 0xA6, 0x28, 0xD5, 0x92, 0x48, 0xDC, 0xDA, 0x16, 0x22, 0xD8, 0xAA, 0x76, 0x1B, 0x9B, 0x75, 0x37, 0x8D, 0x39, 0x69, 0x4C, 0x26, 0x3C, 0x6D, 0x1A, 0x87, 0x31, 0x45, 0x13, 0xF3, 0xAD, 0x25, 0x80, 0x0D, 0xD4, 0x05, 0xF0, 0x39, 0x8B, 0x00, 0xBE, 0x10, 0x36, 0xC0, 0xE7, 0xEC, 0x1A, 0xE0, 0x00, 0x07, 0x08, 0xF0, 0xAD, 0xD0, 0xFF, 0x51, 0x25, 0x79, 0x59 };

const uint8_t spONE[] PROGMEM = { 0xA6, 0x90, 0x76, 0xCC, 0x43, 0x6B, 0xB9, 0x42, 0xD8, 0x35, 0x77, 0xA9, 0x19, 0x72, 0xE5, 0x46, 0xD2, 0x62, 0x56, 0xCB, 0xAC, 0x9F, 0x68, 0xE1, 0x4E, 0x23, 0x09, 0x71, 0x23, 0x55, 0x3A, 0x9E, 0xB8, 0xC4, 0x4B, 0x77, 0x6D, 0x74, 0xE3, 0x93, 0x54, 0x7B, 0xE5, 0x6E, 0x2D, 0x4F, 0xD6, 0xEC, 0x56, 0x84, 0xB5, 0x3A, 0x45, 0x0D, 0x5D, 0xA1, 0xD6, 0xA8, 0xF4, 0xC5, 0x58, 0x84, 0x78, 0xEC, 0x34, 0x64, 0x6D, 0x16, 0xEA, 0x8D, 0xC2, 0x90, 0x95, 0x66, 0xB1, 0x25, 0x0E, 0x43, 0x92, 0x1A, 0x43, 0x9E, 0x26, 0x0C, 0x49, 0x49, 0xB4, 0x78, 0xEA, 0x34, 0x16, 0x1B, 0xA6, 0xEA, 0xB1, 0xC9, 0x24, 0x82, 0xBB, 0x88, 0xC8, 0x06, 0x00, 0xF8, 0x26 };

const uint8_t spPOINT[] PROGMEM = { 0x02, 0xC8, 0x5A, 0x5C, 0x00, 0x45, 0x4E, 0x25, 0xB7, 0xF0, 0x2C, 0x4D, 0x74, 0xDC, 0xDC, 0xD8, 0x26, 0xDD, 0x65, 0xE6, 0x70, 0x93, 0xDF, 0xCA, 0xA0, 0x8E, 0xD3, 0x5D, 0x5E, 0x0E, 0x9B, 0x19, 0xD4, 0xF2, 0x64, 0xD3, 0x94, 0x69, 0x51, 0xAA, 0x53, 0xAC, 0x34, 0x4A, 0x65, 0xB5, 0x4A, 0x3B, 0x32, 0x69, 0x85, 0x5B, 0x2B, 0x7D, 0x57, 0x6A, 0x59, 0xE4, 0xC6, 0x0C, 0x45, 0xA8, 0xB6, 0x69, 0x5A, 0x32, 0x09, 0xE5, 0xEE, 0x22, 0xB2, 0x01, 0x00, 0x14, 0x70, 0x45, 0x9A, 0x06, 0x10, 0xD0, 0x7C, 0xC3, 0xFF, 0x51, 0x35, 0x49, 0x15, 0x49, 0x65, 0x79, 0x05 };

const uint8_t sp_S[] PROGMEM = { 0x04, 0xF8, 0xD4, 0x5D, 0x00, 0x8F, 0xB9, 0x0B, 0xE0, 0x4B, 0x33, 0x06, 0x7C, 0xE6, 0xC5, 0x80, 0xCF, 0xD5, 0x09, 0xF0, 0x0D, 0x0A, 0x02, 0xBE, 0x12, 0x43, 0xC0, 0x55, 0x6C, 0xFF, 0x39, 0x51, 0x51, 0x15, 0x5A };

const uint8_t spPRESS[] PROGMEM = { 0x04, 0xA8, 0x34, 0x9D, 0x01, 0x2D, 0x44, 0x0A, 0x20, 0xF7, 0xAC, 0x60, 0xA7, 0x2E, 0xA6, 0xE6, 0x76, 0xAA, 0xBB, 0xBC, 0x3C, 0x28, 0xBD, 0xAC, 0xC9, 0xF1, 0x6B, 0x31, 0x37, 0xD7, 0x35, 0x27, 0x6A, 0x21, 0x34, 0xC2, 0x56, 0x9F, 0x7C, 0xF8, 0x12, 0x0B, 0x59, 0x7D, 0x9A, 0x19, 0x4A, 0x34, 0x65, 0xCD, 0x6A, 0x87, 0x77, 0x89, 0xD4, 0x25, 0xA9, 0x6F, 0x8E, 0x7C, 0x3C, 0xEA, 0x08, 0x20, 0x73, 0x53, 0x01, 0x7C, 0x25, 0xC6, 0x80, 0x4F, 0xD5, 0x08, 0xF0, 0x0D, 0x1B, 0x03, 0xBE, 0x21, 0x63, 0xC0, 0x57, 0x6C, 0x04, 0xF8, 0x42, 0x92, 0x00, 0x4F, 0x90, 0x22, 0xE0, 0x7B, 0x56, 0x04, 0x7C, 0x47, 0x82, 0x80, 0xEF, 0x84, 0x11, 0xF0, 0x03, 0xE9, 0xFF, 0x59, 0x41, 0x25, 0x71, 0x79, 0x25, 0x05 };

const uint8_t spBUTTON[] PROGMEM = { 0xA9, 0x69, 0xCE, 0xC2, 0x45, 0x14, 0x9F, 0x28, 0xFB, 0xB5, 0x14, 0xDD, 0x78, 0xA2, 0x5C, 0x26, 0x52, 0x6D, 0xD1, 0x8A, 0x4A, 0xEE, 0x2C, 0xB7, 0x45, 0x23, 0x2A, 0x39, 0x23, 0x35, 0x1A, 0x92, 0x58, 0x28, 0x77, 0x17, 0x91, 0x0D, 0x00, 0xA8, 0x28, 0x2E, 0xAA, 0xD0, 0x9D, 0xA4, 0xAA, 0xE8, 0x8E, 0x26, 0x75, 0x56, 0x9A, 0x68, 0x34, 0x83, 0xD3, 0x55, 0x1A, 0xB2, 0x95, 0x54, 0x71, 0xCF, 0x61, 0xCE, 0x4A, 0x22, 0x38, 0xBD, 0x98, 0xA5, 0x70, 0xD7, 0x10, 0x4F, 0x22, 0x96, 0xA2, 0x4C, 0x83, 0x3D, 0xEB, 0xFF, 0x61 };

const uint8_t spB[] PROGMEM = { 0xA9, 0xB2, 0x56, 0x3D, 0xBD, 0x2B, 0x95, 0xB8, 0x28, 0xC1, 0x9D, 0xAD, 0xD5, 0xBC, 0x69, 0x1C, 0xA2, 0xAF, 0x51, 0xF3, 0x97, 0x0D, 0xB0, 0xBE, 0xC6, 0x3B, 0x5C, 0xD1, 0xF2, 0x06, 0x32, 0x1B, 0x7B, 0x67, 0x2B, 0x5F, 0xD1, 0x80, 0x66, 0x62, 0x8F, 0x6A, 0x3B, 0x26, 0x9E, 0x89, 0xDD, 0x9A, 0x1D, 0x85, 0x70, 0xA7, 0x4E, 0x1A, 0x56, 0x60, 0x94, 0xEB, 0x3A, 0x69, 0x9C, 0x8E, 0xC8, 0xBF, 0xE2, 0xB8, 0xB1, 0x6B, 0xB0, 0x9D, 0x72, 0xEC, 0xC6, 0x6E, 0xC1, 0x67, 0xD3, 0x8E, 0x1B, 0x47, 0x04, 0xE9, 0xA9, 0x28, 0xFF, 0x11, 0x41, 0x21 };

const uint8_t spTWO[] PROGMEM = { 0x0E, 0x58, 0x56, 0xCB, 0x00, 0xD7, 0xAB, 0x19, 0xE0, 0x38, 0xCB, 0xE6, 0x0C, 0x65, 0x8A, 0x61, 0xAD, 0x86, 0x9D, 0xA5, 0x79, 0xA4, 0x2D, 0x1E, 0x6E, 0x61, 0x69, 0x9A, 0xF6, 0x79, 0x04, 0x85, 0xA4, 0x6B, 0xC8, 0xEF, 0x16, 0x17, 0x94, 0xA1, 0xC1, 0xBB, 0x5B, 0x5E, 0x61, 0x86, 0x05, 0x7E, 0x0A, 0xA5, 0x0A, 0x25, 0xA6, 0x75, 0x3A, 0x34, 0x8E, 0x5F, 0xA8, 0xEB, 0x4B, 0xD7, 0x49, 0xBB, 0xE6, 0x12, 0x8F, 0xDD, 0xE0, 0xC5, 0x78, 0xB2, 0xBC, 0x36, 0x83, 0x15, 0xEB, 0x2E, 0xF2, 0x48, 0x0D, 0x46, 0x9E, 0x89, 0xE9, 0x2B, 0x31, 0xC8, 0x32, 0x2C, 0x9E, 0xAB, 0xFF, 0x5A, 0x26 };

const uint8_t spTRY[] PROGMEM = { 0x06, 0x98, 0xA9, 0x2D, 0x01, 0x33, 0xB5, 0x3B, 0xA0, 0x87, 0x8C, 0xE6, 0xD7, 0x10, 0xEE, 0xC2, 0x72, 0x86, 0x9B, 0xA6, 0x16, 0x95, 0x27, 0x9C, 0xDE, 0x09, 0x4A, 0xDE, 0x72, 0xF5, 0x86, 0x27, 0xAE, 0xEE, 0xCA, 0xD5, 0x53, 0x9E, 0xAC, 0x99, 0xAD, 0x54, 0x4B, 0x79, 0xBA, 0x66, 0xB7, 0x33, 0xA4, 0xF5, 0x1A, 0xAA, 0xDB, 0x8A, 0xD4, 0x55, 0x6B, 0x2C, 0x61, 0xC3, 0xD2, 0x66, 0x8D, 0xA9, 0xE4, 0x76, 0x37, 0x9F, 0x54, 0xA6, 0x1A, 0x2C, 0xC2, 0xB2, 0x72, 0x1A, 0xB3, 0xD5, 0xA8, 0xEA, 0x32, 0x69, 0x2C, 0x46, 0x62, 0xAA, 0xCA, 0x84, 0xB1, 0x5A, 0xB6, 0xC9, 0x0E, 0xEB, 0xC6, 0x51, 0x58, 0x34, 0x3A, 0xAE, 0x1B, 0x47, 0x66, 0x89, 0x48, 0xBB, 0xFF, 0x51, 0x35, 0x19, 0x51, 0x75, 0x15 };

const uint8_t spAGAIN[] PROGMEM = { 0xA9, 0x28, 0x2E, 0x64, 0x68, 0x26, 0xAF, 0xB2, 0x26, 0xF3, 0xA4, 0xAE, 0x73, 0x8A, 0x1A, 0xDC, 0x4A, 0x62, 0xF6, 0xC9, 0xBA, 0x6B, 0x2A, 0x93, 0xC5, 0xA9, 0x28, 0xC2, 0x71, 0x39, 0x26, 0xFB, 0x2C, 0x15, 0xDE, 0xA8, 0x98, 0x9B, 0x93, 0x91, 0x4C, 0x19, 0x90, 0x59, 0x71, 0x56, 0x34, 0x5C, 0x40, 0x55, 0x55, 0x3E, 0x61, 0x0B, 0xC2, 0x13, 0x1B, 0xE5, 0x44, 0x3D, 0x89, 0x56, 0x74, 0xDC, 0x13, 0x77, 0xAF, 0x3C, 0x31, 0x55, 0x4E, 0x32, 0x7C, 0x50, 0x45, 0x2D, 0x5E, 0xD9, 0xF0, 0x4E, 0x59, 0xB5, 0x78, 0x95, 0x23, 0x26, 0x59, 0x65, 0xED, 0x55, 0xF7, 0x24, 0x94, 0x55, 0x65, 0x47, 0x3B, 0xA4, 0x92, 0x5D, 0x55, 0x99, 0x5D, 0x1A, 0xBA, 0x26, 0xCD, 0xD9, 0x4A, 0x61, 0x2C, 0x9C, 0x2A, 0x33, 0x9D, 0x84, 0x31, 0x29, 0x4B, 0xE7, 0xF0, 0xEA, 0xC6, 0x64, 0x34, 0x9C, 0x23, 0x4D, 0x18, 0x8B, 0xE4, 0xD6, 0x50, 0x2F, 0x61, 0x48, 0x5A, 0xD3, 0xC2, 0x5D, 0xFD, 0x15, 0x39, 0x55, 0x79, 0x59, 0x41 };